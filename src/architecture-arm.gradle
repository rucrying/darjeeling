binaries.all {
    cCompiler.args "-gdwarf-2"
    cCompiler.args "-ggdb"
    cCompiler.args "-Wall"
    cCompiler.args "-Werror"
    cCompiler.args "-std=gnu99"
}

model {
    components.darjeeling {
        targetPlatform 'arm'
    }
    toolChains {
        gcc(Gcc) {
            target('arm') { t ->
                t.getcCompiler().setExecutable('arm-linux-gnueabihf-gcc');
                t.getCppCompiler().setExecutable('arm-linux-gnueabihf-g++');
                t.getObjcCompiler().setExecutable('arm-linux-gnueabihf-gcc');
                t.getObjcppCompiler().setExecutable('arm-linux-gnueabihf-g++');
                t.getAssembler().setExecutable('arm-linux-gnueabihf-as');
                t.getLinker().setExecutable('arm-linux-gnueabihf-gcc');
                t.getStaticLibArchiver().setExecutable('arm-linux-gnueabihf-ar');
            }
        }
    }
    platforms {
        arm {
            architecture 'arm'
        }
    }
}


tasks.architectureSpecificAssemble { 
    dependsOn tasks['createLibArchive']
    dependsOn tasks['createAppArchive']

    def libInfusion = tasks['createLibArchive'].archiveFile
    def appInfusion = tasks['createAppArchive'].archiveFile
    def executable = djTargetBinary

    inputs.file libInfusion
    inputs.file appInfusion
    inputs.file executable

    doLast {
        copy { from libInfusion into destDir }
        copy { from appInfusion into destDir }
        copy { from djTargetBinary into destDir rename { f -> 'darjeeling.elf' } }
    }
}