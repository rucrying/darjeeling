apply plugin: 'c'
apply from: 'taskdefs.gradle'
apply from: 'configplugin.gradle'
apply from: 'djsourcesetplugin.gradle'
if (new File("${project.rootDir}/usersettings.gradle").exists()) {
    apply from: 'usersettings.gradle'
} else {
    println 'No usersettings.gradle file found. Make a copy usersettings.gradle.dist and fill in the required fields to use avrdude.'
}

// Determine the name of the configuration to use
def userDir = new File(System.getProperty('user.dir')).toPath()
if (!project.hasProperty('djConfigname')) {
    if (userDir.getNameCount() >= 2
            && userDir.getName(userDir.getNameCount()-2).toString() == 'config') {
        ext.djConfigname = userDir.getName(userDir.getNameCount()-1).toString()
    } else {
        throw new GradleException('No config specified. A configuration can be selected using the commandline option ("gradle -PdjConfigname=<configname>"), or by starting the build from one of the config directories ("gradle -b ../../build.gradle").')
    }
}
if (!project.hasProperty("buildStaticLibrary")) {
    ext.buildStaticLibrary = false
}

// Set some basic variables
ext.configDir = "${rootDir}/config/${djConfigname}"
buildDir = new File(buildDir, djConfigname)
ext.djTargetBinary = new File("${buildDir}/binaries/darjeelingExecutable/darjeeling")

// Helper functions
def ensureEmptyDir(File destDir) {
    if (destDir.exists()) {
        destDir.deleteDir()
    }
    destDir.mkdirs()
}

def insertBase(String fileName, String node_id) {
    if (fileName.contains("-wkpf-tables")) {
        return fileName+node_id
    } else {
        return fileName
    }
}

//// Main build tasks
task architectureSpecificAssemble {
    // Can be filled in by architectures
    //  dependsOn assemble, but if I do that here I'll get an error when adding model components...
    //  seems a smelly to me that just touching the assemble task somehow affects the whole project state
    //  such that I can't add components anymore.
    ext.destDir = new File("${buildDir}/darjeeling")
    outputs.dir destDir
    doFirst {
        ensureEmptyDir(destDir)
    }
}

task darjeeling {
    dependsOn architectureSpecificAssemble
}

class CreateDjArchiveTask extends DefaultTask {
    class ArchivePart {
        String filename
        int filetype
    }

    String archiveFile
    def archiveParts = []
    String archiveName

    @OutputDirectory
    File destDir
    File nodeDir

    void addPart(String name, int type, dependsOnTask) {
        def part = new ArchivePart()
        part.filename = name
        part.filetype = type
        archiveParts.add(part)
        inputs.file name
        if (dependsOnTask != null) {
            dependsOn dependsOnTask
        }
    }

    @TaskAction
    void createArchive() {
        project.ensureEmptyDir(destDir)
        def nodes = []
        File list = new File ("${destDir}/../generated-wkpf-tables/wkdeploy.component_list")
        if (list.exists()) {
            new File("${destDir}/../generated-wkpf-tables/wkdeploy.component_list").eachLine { line ->
	        nodes.add(line)
            }
        }
	nodes.each { node_id ->
                println node_id
        	boolean first = true
		nodeDir = new File("${destDir}/node${node_id}")
        	project.ensureEmptyDir(nodeDir)
		archiveParts.each { part ->
		    println "Adding ${part.filename} to ${archiveName}"
		    String fname = project.insertBase(part.filename, node_id)
		    ant.djarchive(dest: "${nodeDir}/${archiveName}",
					 src: fname,
					 filetype: part.filetype,
					 mode: first ? 'create' : 'append')
		    first = false
		}
	}
	boolean first = true
	archiveParts.each { part ->
	    println "Adding ${part.filename} to ${destDir}/${archiveFile}"
	    ant.djarchive(dest: archiveFile,
				 src: part.filename,
				 filetype: part.filetype,
				 mode: first ? 'create' : 'append')
	    first = false
	}
    }
}

// Basic tasks
task createLibArchive (type: CreateDjArchiveTask) {
    destDir = new File("${buildDir}/lib_infusions")
    archiveFile = "${destDir}/lib_infusions.dja"
    archiveName = "lib_infusions.dja"
}

task createAppArchive (type: CreateDjArchiveTask) {
    destDir = new File("${buildDir}/app_infusion")
    archiveFile = "${destDir}/app_infusion.dja"
    archiveName = "app_infusion.dja"
}

// TODONR: make this, and other infuser tasks depend on the infuser project
task generateLibinit {
    ext.destDir = new File("${buildDir}/generated-libinit")
    outputs.dir destDir
    outputs.upToDateWhen { return false }
    doLast {
        ensureEmptyDir(destDir)
        ant.generate_libinit(dest: "${destDir}/GENERATED_libinit.c", libDir: "${project.rootDir}/lib", libraries: djlibsource.collect { l -> l.name }.join(' '))
    }
}

// Basic C source sets, excluding libraries and possibly infusions.
model {
    components {
        darjeeling(buildStaticLibrary ? NativeLibrarySpec : NativeExecutableSpec) {
            sources {
                core(CSourceSet) {
                    source {
                        srcDir "${project.rootDir}/core/c/common"
                        project.djConfig.getAllPlatforms().each { p ->
                            srcDir "${project.rootDir}/core/c/${p}"
                        }
                        include '**/*.c'
                        srcDir "${project.rootDir}/architecture/${djArchitecture}/c"
                        include '**/*.c'
                    }
                    exportedHeaders {
                        srcDir "${project.rootDir}/core/include/common"
                        project.djConfig.getAllPlatforms().each { p ->
                            srcDir "${project.rootDir}/core/include/${p}"
                        }
                        srcDir "${project.rootDir}/config/${djConfigname}/include"
                        srcDir "${project.rootDir}/architecture/${djArchitecture}/include"
                    }
                }
                main(CSourceSet) {  
                    source {
                        srcDir "${project.rootDir}/config/${djConfigname}/c"
                        include '**/*.c'
                    }
                    lib ( sources['core'] )
                }
                libinit(CSourceSet) {  
                    source {
                        generateLibinit.outputs.getFiles().each { f ->
                            srcDir "${f}"
                        }
                        include '**/*.c'
                        builtBy(generateLibinit)
                    }
                    lib ( sources['core'] )
                }
            }
        }
    }
}



////// Code above this line is all generic. From here we start to load the specifics for this config.



// Load the config file
apply from: "${configDir}/sub.gradle"

// Load the platform definition for this config
apply from: "platforms.gradle"

// Load the libraries and application
apply from: "architecture-${djArchitecture}.gradle"

// Load any libraries explicitly included in the config (dependencies will be loaded from addTasks())
ext.djConfig.libraries.each { lib ->
    loadDjLibrarySourceSet(lib)
}
// And load the application (dependencies will be loaded from addTasks())
loadDjAppSourceSet(ext.djConfig.app)

// Don't do this earlier, since refering to the assemble task too soon will somehow break the build script.
architectureSpecificAssemble.dependsOn assemble

// If we build a static library (for Arduino), then set the default task to darjeelingStaticLibrary, since the normal
// default will also try to build a shared library, which will fail for avr-gcc.
if (buildStaticLibrary) {
    defaultTasks 'darjeelingStaticLibrary'
} else {
    defaultTasks 'darjeeling'
}
